"""
test that we can perform a query and get sensible results to plot.
"""

from utils import parse_circuit_file
from database import BenchmarkMeasurement, session
from sqlalchemy import and_, or_
from plotting import create_plot, build_filter, generate_plots

test_dicts = [
    {'x_axis_var': 'depth',
     'category_field': 'context_name',
     'context_selections': ['HElib_F2'],
     'gate_selections': ['ADD'],
     'input_type_width': ['1'],
     'input_type_signed': [False]},
    {'x_axis_var': 'context_name',
     'category_field': 'depth',
     'context_selections': ['HElib_F2', 'HElib_Fp', 'TFHE'],
     'gate_selections': ['SUBTRACT'],
     'input_type_width': ['8'],
    'input_type_signed' : [False] }
    ]

def test_query_db():
    """ 
    test that we can use an input dict (as generated by PlotsForm in forms.py)
    to query the db
    """
    all_rows = session.query(BenchmarkMeasurement).all()
    assert(len(all_rows) > 0)
    for input_dict in test_dicts:
        filt = build_filter(input_dict)
        filtered_rows = session.query(BenchmarkMeasurement).filter(filt).all()
        assert(len(filtered_rows) <= len(all_rows))
        xdata = []
        ydata = {}
        seen_combinations = []  ## a list of (xval, category) tuples that we've already seen
        total_yvals = 0
        for row in filtered_rows:
            xval = row.__getattribute__(input_dict["x_axis_var"])
            category = row.__getattribute__(input_dict["category_field"])
            if (xval, category) in seen_combinations:
                continue
            seen_combinations.append((xval, category))
            if not xval in xdata:
                xdata.append(xval)
            if not category in ydata.keys():
                ydata[category] = []
            ydata[category].append(row.__getattribute__("execution_time"))
            total_yvals += 1
        num_xvals = len(xdata)
        num_categories = len(ydata.keys())
### check we don't have more than one y-value per bin/category combination
####   (this could easily happen if we're not careful with the query....)
        assert(total_yvals == num_xvals * num_categories)  
